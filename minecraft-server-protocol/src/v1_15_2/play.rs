// autogenerated file
#![allow(unused_imports)]

use crate::types::*;
use async_std::io::{prelude::*, Cursor};
use async_trait::async_trait;
use minecraft_server_protocol_derive::{ClientBoundPacket, ServerBoundPacket};
use std::fmt::{Display, Formatter};

pub mod client {
    use super::*;

    /* TODO incomplete struct SpawnEntity
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x00]
    pub struct SpawnEntity {
        pub entity_id: VarIntField,
        // TODO pub object_uuid: Uuid,
        pub r#type: VarIntField,
        pub x: DoubleField,
        pub y: DoubleField,
        pub z: DoubleField,
        pub pitch: ByteField,
        pub yaw: ByteField,
        pub object_data: IntField,
        pub velocity_x: ShortField,
        pub velocity_y: ShortField,
        pub velocity_z: ShortField,
    }*/

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x01]
    pub struct SpawnEntityExperienceOrb {
        pub entity_id: VarIntField,
        pub x: DoubleField,
        pub y: DoubleField,
        pub z: DoubleField,
        pub count: ShortField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x02]
    pub struct SpawnEntityWeather {
        pub entity_id: VarIntField,
        pub r#type: ByteField,
        pub x: DoubleField,
        pub y: DoubleField,
        pub z: DoubleField,
    }

    /* TODO incomplete struct SpawnEntityLiving
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x03]
    pub struct SpawnEntityLiving {
        pub entity_id: VarIntField,
        // TODO pub entity_uuid: Uuid,
        pub r#type: VarIntField,
        pub x: DoubleField,
        pub y: DoubleField,
        pub z: DoubleField,
        pub yaw: ByteField,
        pub pitch: ByteField,
        pub head_pitch: ByteField,
        pub velocity_x: ShortField,
        pub velocity_y: ShortField,
        pub velocity_z: ShortField,
    }*/

    /* TODO incomplete struct SpawnEntityPainting
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x04]
    pub struct SpawnEntityPainting {
        pub entity_id: VarIntField,
        // TODO pub entity_uuid: Uuid,
        pub title: VarIntField,
        pub location: PositionField<578>,
        pub direction: UByteField,
    }*/

    /* TODO incomplete struct NamedEntitySpawn
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x05]
    pub struct NamedEntitySpawn {
        pub entity_id: VarIntField,
        // TODO pub player_uuid: Uuid,
        pub x: DoubleField,
        pub y: DoubleField,
        pub z: DoubleField,
        pub yaw: ByteField,
        pub pitch: ByteField,
    }*/

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x06]
    pub struct Animation {
        pub entity_id: VarIntField,
        pub animation: UByteField,
    }

    /* TODO incomplete struct Statistics
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x07]
    pub struct Statistics {
        // TODO pub entries: Array<Container>,
    }*/

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x08]
    pub struct AcknowledgePlayerDigging {
        pub location: PositionField<578>,
        pub block: VarIntField,
        pub status: VarIntField,
        pub successful: BoolField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x09]
    pub struct BlockBreakAnimation {
        pub entity_id: VarIntField,
        pub location: PositionField<578>,
        pub destroy_stage: ByteField,
    }

    /* TODO incomplete struct TileEntityData
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x0a]
    pub struct TileEntityData {
        pub location: PositionField<578>,
        pub action: UByteField,
        // TODO pub nbt_data: OptionalNbt,
    }*/

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x0b]
    pub struct BlockAction {
        pub location: PositionField<578>,
        pub byte_1: UByteField,
        pub byte_2: UByteField,
        pub block_id: VarIntField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x0c]
    pub struct BlockChange {
        pub location: PositionField<578>,
        pub r#type: VarIntField,
    }

    /* TODO incomplete struct BossBar
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x0d]
    pub struct BossBar {
        // TODO pub entity_uuid: Uuid,
        pub action: VarIntField,
        pub title: BossBarTitle,
        pub health: BossBarHealth,
        pub color: BossBarColor,
        pub dividers: BossBarDividers,
        pub flags: BossBarFlags,
    }*/

    pub enum BossBarTitle {
        /// action=0
        One(StringField),
        /// action=3
        Two(StringField),
        NotPresent,
    }

    impl Display for BossBarTitle {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("BossBarTitle") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for BossBarTitle {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum BossBarHealth {
        /// action=0
        One(FloatField),
        /// action=2
        Two(FloatField),
        NotPresent,
    }

    impl Display for BossBarHealth {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("BossBarHealth") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for BossBarHealth {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum BossBarColor {
        /// action=0
        One(VarIntField),
        /// action=4
        Two(VarIntField),
        NotPresent,
    }

    impl Display for BossBarColor {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("BossBarColor") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for BossBarColor {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum BossBarDividers {
        /// action=0
        One(VarIntField),
        /// action=4
        Two(VarIntField),
        NotPresent,
    }

    impl Display for BossBarDividers {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("BossBarDividers") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for BossBarDividers {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum BossBarFlags {
        /// action=0
        One(UByteField),
        /// action=5
        Two(UByteField),
        NotPresent,
    }

    impl Display for BossBarFlags {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("BossBarFlags") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for BossBarFlags {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x0e]
    pub struct Difficulty {
        pub difficulty: UByteField,
        pub difficulty_locked: BoolField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x0f]
    pub struct Chat {
        pub message: StringField,
        pub position: ByteField,
    }

    /* TODO incomplete struct MultiBlockChange
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x10]
    pub struct MultiBlockChange {
        pub chunk_x: IntField,
        pub chunk_z: IntField,
        // TODO pub records: Array<Container>,
    }*/

    /* TODO incomplete struct TabComplete
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x11]
    pub struct TabComplete {
        pub transaction_id: VarIntField,
        pub start: VarIntField,
        pub length: VarIntField,
        // TODO pub matches: Array<Container>,
    }*/

    /* TODO incomplete struct DeclareCommands
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x12]
    pub struct DeclareCommands {
        // TODO pub nodes: Array<Container>,
        pub root_index: VarIntField,
    }*/

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x13]
    pub struct Transaction {
        pub window_id: ByteField,
        pub action: ShortField,
        pub accepted: BoolField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x14]
    pub struct CloseWindow {
        pub window_id: UByteField,
    }

    /* TODO incomplete struct WindowItems
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x15]
    pub struct WindowItems {
        pub window_id: UByteField,
        // TODO pub items: Array<Slot>,
    }*/

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x16]
    pub struct CraftProgressBar {
        pub window_id: UByteField,
        pub property: ShortField,
        pub value: ShortField,
    }

    /* TODO incomplete struct SetSlot
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x17]
    pub struct SetSlot {
        pub window_id: ByteField,
        pub slot: ShortField,
        // TODO pub item: Slot,
    }*/

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x18]
    pub struct SetCooldown {
        pub item_id: VarIntField,
        pub cooldown_ticks: VarIntField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x19]
    pub struct CustomPayload {
        pub channel: StringField,
        pub data: RestOfPacketByteArrayField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x1a]
    pub struct NamedSoundEffect {
        pub sound_name: StringField,
        pub sound_category: VarIntField,
        pub x: IntField,
        pub y: IntField,
        pub z: IntField,
        pub volume: FloatField,
        pub pitch: FloatField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x1b]
    pub struct KickDisconnect {
        pub reason: StringField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x1c]
    pub struct EntityStatus {
        pub entity_id: IntField,
        pub entity_status: ByteField,
    }

    /* TODO incomplete struct Explosion
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x1d]
    pub struct Explosion {
        pub x: FloatField,
        pub y: FloatField,
        pub z: FloatField,
        pub radius: FloatField,
        // TODO pub affected_block_offsets: Array<Container>,
        pub player_motion_x: FloatField,
        pub player_motion_y: FloatField,
        pub player_motion_z: FloatField,
    }*/

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x1e]
    pub struct UnloadChunk {
        pub chunk_x: IntField,
        pub chunk_z: IntField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x1f]
    pub struct GameStateChange {
        pub reason: UByteField,
        pub game_mode: FloatField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x20]
    pub struct OpenHorseWindow {
        pub window_id: UByteField,
        pub nb_slots: VarIntField,
        pub entity_id: IntField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x21]
    pub struct KeepAlive {
        pub keep_alive_id: LongField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x22]
    pub struct MapChunk {
        pub x: IntField,
        pub z: IntField,
        pub ground_up: BoolField,
        pub bit_map: VarIntField,
        pub heightmaps: NbtField,
        pub biomes: MapChunkBiomes,
        pub chunk_data: VarIntThenByteArrayField,
        pub block_entities: PrefixedArrayField<VarIntField, NbtField>,
    }

    pub enum MapChunkBiomes {
        /// groundUp=false
        One,
        /// groundUp=true
        Two([IntField; 1024]),
    }

    impl Display for MapChunkBiomes {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("MapChunkBiomes") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for MapChunkBiomes {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x23]
    pub struct WorldEvent {
        pub effect_id: IntField,
        pub location: PositionField<578>,
        pub data: IntField,
        pub global: BoolField,
    }

    /* TODO incomplete struct WorldParticles
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x24]
    pub struct WorldParticles {
        pub particle_id: IntField,
        pub long_distance: BoolField,
        pub x: DoubleField,
        pub y: DoubleField,
        pub z: DoubleField,
        pub offset_x: FloatField,
        pub offset_y: FloatField,
        pub offset_z: FloatField,
        pub particle_data: FloatField,
        pub particles: IntField,
        // TODO pub data: ParticleData,
    }*/

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x25]
    pub struct UpdateLight {
        pub chunk_x: VarIntField,
        pub chunk_z: VarIntField,
        pub sky_light_mask: VarIntField,
        pub block_light_mask: VarIntField,
        pub empty_sky_light_mask: VarIntField,
        pub empty_block_light_mask: VarIntField,
        pub data: RestOfPacketByteArrayField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x26]
    pub struct Login {
        pub entity_id: IntField,
        pub game_mode: UByteField,
        pub dimension: IntField,
        pub hashed_seed: LongField,
        pub max_players: UByteField,
        pub level_type: StringField,
        pub view_distance: VarIntField,
        pub reduced_debug_info: BoolField,
        pub enable_respawn_screen: BoolField,
    }

    /* TODO incomplete struct Map
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x27]
    pub struct Map {
        pub item_damage: VarIntField,
        pub scale: ByteField,
        pub tracking_position: BoolField,
        pub locked: BoolField,
        // TODO pub icons: Array<Container>,
        pub columns: ByteField,
        pub rows: MapRows,
        pub x: MapX,
        pub y: MapY,
        pub data: MapData,
    }*/

    pub enum MapRows {
        // TODO Default(...)
        /// columns=0
        One,
    }

    impl Display for MapRows {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("MapRows") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for MapRows {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum MapX {
        // TODO Default(...)
        /// columns=0
        One,
    }

    impl Display for MapX {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("MapX") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for MapX {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum MapY {
        // TODO Default(...)
        /// columns=0
        One,
    }

    impl Display for MapY {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("MapY") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for MapY {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum MapData {
        // TODO Default(...)
        /// columns=0
        One,
    }

    impl Display for MapData {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("MapData") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for MapData {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    /* TODO incomplete struct TradeList
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x28]
    pub struct TradeList {
        pub window_id: VarIntField,
        // TODO pub trades: Array<Container>,
        pub villager_level: VarIntField,
        pub experience: VarIntField,
        pub is_regular_villager: BoolField,
        pub can_restock: BoolField,
    }*/

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x29]
    pub struct RelEntityMove {
        pub entity_id: VarIntField,
        pub d_x: ShortField,
        pub d_y: ShortField,
        pub d_z: ShortField,
        pub on_ground: BoolField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x2a]
    pub struct EntityMoveLook {
        pub entity_id: VarIntField,
        pub d_x: ShortField,
        pub d_y: ShortField,
        pub d_z: ShortField,
        pub yaw: ByteField,
        pub pitch: ByteField,
        pub on_ground: BoolField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x2b]
    pub struct EntityLook {
        pub entity_id: VarIntField,
        pub yaw: ByteField,
        pub pitch: ByteField,
        pub on_ground: BoolField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x2c]
    pub struct Entity {
        pub entity_id: VarIntField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x2d]
    pub struct VehicleMove {
        pub x: DoubleField,
        pub y: DoubleField,
        pub z: DoubleField,
        pub yaw: FloatField,
        pub pitch: FloatField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x2e]
    pub struct OpenBook {
        pub hand: VarIntField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x2f]
    pub struct OpenWindow {
        pub window_id: VarIntField,
        pub inventory_type: VarIntField,
        pub window_title: StringField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x30]
    pub struct OpenSignEntity {
        pub location: PositionField<578>,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x31]
    pub struct CraftRecipeResponse {
        pub window_id: ByteField,
        pub recipe: StringField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x32]
    pub struct Abilities {
        pub flags: ByteField,
        pub flying_speed: FloatField,
        pub walking_speed: FloatField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x33]
    pub struct CombatEvent {
        pub event: VarIntField,
        pub duration: CombatEventDuration,
        pub player_id: CombatEventPlayerId,
        pub entity_id: CombatEventEntityId,
        pub message: CombatEventMessage,
    }

    pub enum CombatEventDuration {
        /// event=1
        One(VarIntField),
        NotPresent,
    }

    impl Display for CombatEventDuration {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("CombatEventDuration") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for CombatEventDuration {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum CombatEventPlayerId {
        /// event=2
        One(VarIntField),
        NotPresent,
    }

    impl Display for CombatEventPlayerId {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("CombatEventPlayerId") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for CombatEventPlayerId {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum CombatEventEntityId {
        /// event=1
        One(IntField),
        /// event=2
        Two(IntField),
        NotPresent,
    }

    impl Display for CombatEventEntityId {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("CombatEventEntityId") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for CombatEventEntityId {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum CombatEventMessage {
        /// event=2
        One(StringField),
        NotPresent,
    }

    impl Display for CombatEventMessage {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("CombatEventMessage") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for CombatEventMessage {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    /* TODO incomplete struct PlayerInfo
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x34]
    pub struct PlayerInfo {
        pub action: VarIntField,
        // TODO pub data: Array<Container>,
    }*/

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x35]
    pub struct FacePlayer {
        pub feet_eyes: VarIntField,
        pub x: DoubleField,
        pub y: DoubleField,
        pub z: DoubleField,
        pub is_entity: BoolField,
        pub entity_id: FacePlayerEntityId,
        pub entity_feet_eyes: FacePlayerEntityFeetEyes,
    }

    pub enum FacePlayerEntityId {
        /// isEntity=true
        One(VarIntField),
        NotPresent,
    }

    impl Display for FacePlayerEntityId {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("FacePlayerEntityId") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for FacePlayerEntityId {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum FacePlayerEntityFeetEyes {
        /// isEntity=true
        One(StringField),
        NotPresent,
    }

    impl Display for FacePlayerEntityFeetEyes {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("FacePlayerEntityFeetEyes") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for FacePlayerEntityFeetEyes {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x36]
    pub struct Position {
        pub x: DoubleField,
        pub y: DoubleField,
        pub z: DoubleField,
        pub yaw: FloatField,
        pub pitch: FloatField,
        pub flags: ByteField,
        pub teleport_id: VarIntField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x37]
    pub struct UnlockRecipes {
        pub action: VarIntField,
        pub crafting_book_open: BoolField,
        pub filtering_craftable: BoolField,
        pub smelting_book_open: BoolField,
        pub filtering_smeltable: BoolField,
        pub recipes_1: PrefixedArrayField<VarIntField, StringField>,
        pub recipes_2: UnlockRecipesRecipes2,
    }

    pub enum UnlockRecipesRecipes2 {
        /// action=0
        One(PrefixedArrayField<VarIntField, StringField>),
        NotPresent,
    }

    impl Display for UnlockRecipesRecipes2 {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("UnlockRecipesRecipes2") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for UnlockRecipesRecipes2 {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x38]
    pub struct EntityDestroy {
        pub entity_ids: PrefixedArrayField<VarIntField, VarIntField>,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x39]
    pub struct RemoveEntityEffect {
        pub entity_id: VarIntField,
        pub effect_id: ByteField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x3a]
    pub struct ResourcePackSend {
        pub url: StringField,
        pub hash: StringField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x3b]
    pub struct Respawn {
        pub dimension: IntField,
        pub hashed_seed: LongField,
        pub gamemode: UByteField,
        pub level_type: StringField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x3c]
    pub struct EntityHeadRotation {
        pub entity_id: VarIntField,
        pub head_yaw: ByteField,
    }

    /* TODO incomplete struct SelectAdvancementTab
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x3d]
    pub struct SelectAdvancementTab {
        // TODO pub id: Option,
    }*/

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x3e]
    pub struct WorldBorder {
        pub action: VarIntField,
        pub radius: WorldBorderRadius,
        pub x: WorldBorderX,
        pub z: WorldBorderZ,
        pub old_radius: WorldBorderOldRadius,
        pub new_radius: WorldBorderNewRadius,
        pub speed: WorldBorderSpeed,
        pub portal_boundary: WorldBorderPortalBoundary,
        pub warning_time: WorldBorderWarningTime,
        pub warning_blocks: WorldBorderWarningBlocks,
    }

    pub enum WorldBorderRadius {
        /// action=0
        One(DoubleField),
        NotPresent,
    }

    impl Display for WorldBorderRadius {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("WorldBorderRadius") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for WorldBorderRadius {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum WorldBorderX {
        /// action=2
        One(DoubleField),
        /// action=3
        Two(DoubleField),
        NotPresent,
    }

    impl Display for WorldBorderX {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("WorldBorderX") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for WorldBorderX {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum WorldBorderZ {
        /// action=2
        One(DoubleField),
        /// action=3
        Two(DoubleField),
        NotPresent,
    }

    impl Display for WorldBorderZ {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("WorldBorderZ") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for WorldBorderZ {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum WorldBorderOldRadius {
        /// action=1
        One(DoubleField),
        /// action=3
        Two(DoubleField),
        NotPresent,
    }

    impl Display for WorldBorderOldRadius {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("WorldBorderOldRadius") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for WorldBorderOldRadius {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum WorldBorderNewRadius {
        /// action=1
        One(DoubleField),
        /// action=3
        Two(DoubleField),
        NotPresent,
    }

    impl Display for WorldBorderNewRadius {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("WorldBorderNewRadius") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for WorldBorderNewRadius {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum WorldBorderSpeed {
        /// action=1
        One(VarIntField),
        /// action=3
        Two(VarIntField),
        NotPresent,
    }

    impl Display for WorldBorderSpeed {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("WorldBorderSpeed") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for WorldBorderSpeed {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum WorldBorderPortalBoundary {
        /// action=3
        One(VarIntField),
        NotPresent,
    }

    impl Display for WorldBorderPortalBoundary {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("WorldBorderPortalBoundary") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for WorldBorderPortalBoundary {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum WorldBorderWarningTime {
        /// action=3
        One(VarIntField),
        /// action=4
        Two(VarIntField),
        NotPresent,
    }

    impl Display for WorldBorderWarningTime {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("WorldBorderWarningTime") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for WorldBorderWarningTime {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum WorldBorderWarningBlocks {
        /// action=3
        One(VarIntField),
        /// action=5
        Two(VarIntField),
        NotPresent,
    }

    impl Display for WorldBorderWarningBlocks {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("WorldBorderWarningBlocks") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for WorldBorderWarningBlocks {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x3f]
    pub struct Camera {
        pub camera_id: VarIntField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x40]
    pub struct HeldItemSlot {
        pub slot: ByteField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x41]
    pub struct UpdateViewPosition {
        pub chunk_x: VarIntField,
        pub chunk_z: VarIntField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x42]
    pub struct UpdateViewDistance {
        pub view_distance: VarIntField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x43]
    pub struct ScoreboardDisplayObjective {
        pub position: ByteField,
        pub name: StringField,
    }

    /* TODO incomplete struct EntityMetadata
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x44]
    pub struct EntityMetadata {
        pub entity_id: VarIntField,
        // TODO pub metadata: EntityMetadata,
    }*/

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x45]
    pub struct AttachEntity {
        pub entity_id: IntField,
        pub vehicle_id: IntField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x46]
    pub struct EntityVelocity {
        pub entity_id: VarIntField,
        pub velocity_x: ShortField,
        pub velocity_y: ShortField,
        pub velocity_z: ShortField,
    }

    /* TODO incomplete struct EntityEquipment
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x47]
    pub struct EntityEquipment {
        pub entity_id: VarIntField,
        pub slot: VarIntField,
        // TODO pub item: Slot,
    }*/

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x48]
    pub struct Experience {
        pub experience_bar: FloatField,
        pub level: VarIntField,
        pub total_experience: VarIntField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x49]
    pub struct UpdateHealth {
        pub health: FloatField,
        pub food: VarIntField,
        pub food_saturation: FloatField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x4a]
    pub struct ScoreboardObjective {
        pub name: StringField,
        pub action: ByteField,
        pub display_text: ScoreboardObjectiveDisplayText,
        pub r#type: ScoreboardObjectiveType,
    }

    pub enum ScoreboardObjectiveDisplayText {
        /// action=0
        One(StringField),
        /// action=2
        Two(StringField),
        NotPresent,
    }

    impl Display for ScoreboardObjectiveDisplayText {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("ScoreboardObjectiveDisplayText") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for ScoreboardObjectiveDisplayText {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum ScoreboardObjectiveType {
        /// action=0
        One(VarIntField),
        /// action=2
        Two(VarIntField),
        NotPresent,
    }

    impl Display for ScoreboardObjectiveType {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("ScoreboardObjectiveType") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for ScoreboardObjectiveType {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x4b]
    pub struct SetPassengers {
        pub entity_id: VarIntField,
        pub passengers: PrefixedArrayField<VarIntField, VarIntField>,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x4c]
    pub struct Teams {
        pub team: StringField,
        pub mode: ByteField,
        pub name: TeamsName,
        pub friendly_fire: TeamsFriendlyFire,
        pub name_tag_visibility: TeamsNameTagVisibility,
        pub collision_rule: TeamsCollisionRule,
        pub formatting: TeamsFormatting,
        pub prefix: TeamsPrefix,
        pub suffix: TeamsSuffix,
        pub players: TeamsPlayers,
    }

    pub enum TeamsName {
        /// mode=0
        One(StringField),
        /// mode=2
        Two(StringField),
        NotPresent,
    }

    impl Display for TeamsName {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("TeamsName") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for TeamsName {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum TeamsFriendlyFire {
        /// mode=0
        One(ByteField),
        /// mode=2
        Two(ByteField),
        NotPresent,
    }

    impl Display for TeamsFriendlyFire {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("TeamsFriendlyFire") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for TeamsFriendlyFire {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum TeamsNameTagVisibility {
        /// mode=0
        One(StringField),
        /// mode=2
        Two(StringField),
        NotPresent,
    }

    impl Display for TeamsNameTagVisibility {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("TeamsNameTagVisibility") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for TeamsNameTagVisibility {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum TeamsCollisionRule {
        /// mode=0
        One(StringField),
        /// mode=2
        Two(StringField),
        NotPresent,
    }

    impl Display for TeamsCollisionRule {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("TeamsCollisionRule") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for TeamsCollisionRule {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum TeamsFormatting {
        /// mode=0
        One(VarIntField),
        /// mode=2
        Two(VarIntField),
        NotPresent,
    }

    impl Display for TeamsFormatting {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("TeamsFormatting") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for TeamsFormatting {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum TeamsPrefix {
        /// mode=0
        One(StringField),
        /// mode=2
        Two(StringField),
        NotPresent,
    }

    impl Display for TeamsPrefix {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("TeamsPrefix") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for TeamsPrefix {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum TeamsSuffix {
        /// mode=0
        One(StringField),
        /// mode=2
        Two(StringField),
        NotPresent,
    }

    impl Display for TeamsSuffix {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("TeamsSuffix") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for TeamsSuffix {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum TeamsPlayers {
        /// mode=0
        One(PrefixedArrayField<VarIntField, StringField>),
        /// mode=3
        Two(PrefixedArrayField<VarIntField, StringField>),
        /// mode=4
        Three(PrefixedArrayField<VarIntField, StringField>),
        NotPresent,
    }

    impl Display for TeamsPlayers {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("TeamsPlayers") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for TeamsPlayers {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x4d]
    pub struct ScoreboardScore {
        pub item_name: StringField,
        pub action: ByteField,
        pub score_name: StringField,
        pub value: ScoreboardScoreValue,
    }

    pub enum ScoreboardScoreValue {
        // TODO Default(...)
        /// action=1
        One,
    }

    impl Display for ScoreboardScoreValue {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("ScoreboardScoreValue") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for ScoreboardScoreValue {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x4e]
    pub struct SpawnPosition {
        pub location: PositionField<578>,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x4f]
    pub struct UpdateTime {
        pub age: LongField,
        pub time: LongField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x50]
    pub struct Title {
        pub action: VarIntField,
        pub text: TitleText,
        pub fade_in: TitleFadeIn,
        pub stay: TitleStay,
        pub fade_out: TitleFadeOut,
    }

    pub enum TitleText {
        /// action=0
        One(StringField),
        /// action=1
        Two(StringField),
        /// action=2
        Three(StringField),
        NotPresent,
    }

    impl Display for TitleText {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("TitleText") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for TitleText {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum TitleFadeIn {
        /// action=3
        One(IntField),
        NotPresent,
    }

    impl Display for TitleFadeIn {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("TitleFadeIn") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for TitleFadeIn {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum TitleStay {
        /// action=3
        One(IntField),
        NotPresent,
    }

    impl Display for TitleStay {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("TitleStay") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for TitleStay {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum TitleFadeOut {
        /// action=3
        One(IntField),
        NotPresent,
    }

    impl Display for TitleFadeOut {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("TitleFadeOut") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for TitleFadeOut {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x51]
    pub struct EntitySoundEffect {
        pub sound_id: VarIntField,
        pub sound_category: VarIntField,
        pub entity_id: VarIntField,
        pub volume: FloatField,
        pub pitch: FloatField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x52]
    pub struct SoundEffect {
        pub sound_id: VarIntField,
        pub sound_category: VarIntField,
        pub x: IntField,
        pub y: IntField,
        pub z: IntField,
        pub volume: FloatField,
        pub pitch: FloatField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x53]
    pub struct StopSound {
        pub flags: ByteField,
        pub source: StopSoundSource,
        pub sound: StopSoundSound,
    }

    pub enum StopSoundSource {
        /// flags=1
        One(VarIntField),
        /// flags=3
        Two(VarIntField),
        NotPresent,
    }

    impl Display for StopSoundSource {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("StopSoundSource") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for StopSoundSource {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum StopSoundSound {
        /// flags=2
        One(StringField),
        /// flags=3
        Two(StringField),
        NotPresent,
    }

    impl Display for StopSoundSound {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("StopSoundSound") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for StopSoundSound {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x54]
    pub struct PlayerlistHeader {
        pub header: StringField,
        pub footer: StringField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x55]
    pub struct NbtQueryResponse {
        pub transaction_id: VarIntField,
        pub nbt: NbtField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x56]
    pub struct Collect {
        pub collected_entity_id: VarIntField,
        pub collector_entity_id: VarIntField,
        pub pickup_item_count: VarIntField,
    }

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x57]
    pub struct EntityTeleport {
        pub entity_id: VarIntField,
        pub x: DoubleField,
        pub y: DoubleField,
        pub z: DoubleField,
        pub yaw: ByteField,
        pub pitch: ByteField,
        pub on_ground: BoolField,
    }

    /* TODO incomplete struct Advancements
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x58]
    pub struct Advancements {
        pub reset: BoolField,
        // TODO pub advancement_mapping: Array<Container>,
        pub identifiers: PrefixedArrayField<VarIntField, StringField>,
        // TODO pub progress_mapping: Array<Container>,
    }*/

    /* TODO incomplete struct EntityUpdateAttributes
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x59]
    pub struct EntityUpdateAttributes {
        pub entity_id: VarIntField,
        // TODO pub properties: Array<Container>,
    }*/

    #[derive(ClientBoundPacket)]
    #[packet_id = 0x5a]
    pub struct EntityEffect {
        pub entity_id: VarIntField,
        pub effect_id: ByteField,
        pub amplifier: ByteField,
        pub duration: VarIntField,
        pub hide_particles: ByteField,
    }

    /* TODO incomplete struct DeclareRecipes
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x5b]
    pub struct DeclareRecipes {
        // TODO pub recipes: Array<Container>,
    }*/

    /* TODO incomplete struct Tags
    #[derive(ClientBoundPacket)]
    #[packet_id = 0x5c]
    pub struct Tags {
        // TODO pub block_tags: Tags,
        // TODO pub item_tags: Tags,
        // TODO pub fluid_tags: Tags,
        // TODO pub entity_tags: Tags,
    }*/
}

pub mod server {
    use super::*;

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x00]
    pub struct TeleportConfirm {
        pub teleport_id: VarIntField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x01]
    pub struct QueryBlockNbt {
        pub transaction_id: VarIntField,
        pub location: PositionField<578>,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x02]
    pub struct SetDifficulty {
        pub new_difficulty: UByteField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x03]
    pub struct Chat {
        pub message: StringField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x04]
    pub struct ClientCommand {
        pub action_id: VarIntField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x05]
    pub struct Settings {
        pub locale: StringField,
        pub view_distance: ByteField,
        pub chat_flags: VarIntField,
        pub chat_colors: BoolField,
        pub skin_parts: UByteField,
        pub main_hand: VarIntField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x06]
    pub struct TabComplete {
        pub transaction_id: VarIntField,
        pub text: StringField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x07]
    pub struct Transaction {
        pub window_id: ByteField,
        pub action: ShortField,
        pub accepted: BoolField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x08]
    pub struct EnchantItem {
        pub window_id: ByteField,
        pub enchantment: ByteField,
    }

    /* TODO incomplete struct WindowClick
    #[derive(ServerBoundPacket)]
    #[packet_id = 0x09]
    pub struct WindowClick {
        pub window_id: UByteField,
        pub slot: ShortField,
        pub mouse_button: ByteField,
        pub action: ShortField,
        pub mode: ByteField,
        // TODO pub item: Slot,
    }*/

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x0a]
    pub struct CloseWindow {
        pub window_id: UByteField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x0b]
    pub struct CustomPayload {
        pub channel: StringField,
        pub data: RestOfPacketByteArrayField,
    }

    /* TODO incomplete struct EditBook
    #[derive(ServerBoundPacket)]
    #[packet_id = 0x0c]
    pub struct EditBook {
        // TODO pub new_book: Slot,
        pub signing: BoolField,
        pub hand: VarIntField,
    }*/

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x0d]
    pub struct QueryEntityNbt {
        pub transaction_id: VarIntField,
        pub entity_id: VarIntField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x0e]
    pub struct UseEntity {
        pub target: VarIntField,
        pub mouse: VarIntField,
        pub x: UseEntityX,
        pub y: UseEntityY,
        pub z: UseEntityZ,
        pub hand: UseEntityHand,
    }

    pub enum UseEntityX {
        /// mouse=2
        One(FloatField),
        NotPresent,
    }

    impl Display for UseEntityX {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("UseEntityX") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for UseEntityX {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum UseEntityY {
        /// mouse=2
        One(FloatField),
        NotPresent,
    }

    impl Display for UseEntityY {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("UseEntityY") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for UseEntityY {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum UseEntityZ {
        /// mouse=2
        One(FloatField),
        NotPresent,
    }

    impl Display for UseEntityZ {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("UseEntityZ") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for UseEntityZ {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    pub enum UseEntityHand {
        /// mouse=0
        One(VarIntField),
        /// mouse=2
        Two(VarIntField),
        NotPresent,
    }

    impl Display for UseEntityHand {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("UseEntityHand") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for UseEntityHand {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    #[derive(ServerBoundPacket)]
    #[packet_id = 0x0f]
    pub struct KeepAlive {
        pub keep_alive_id: LongField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x10]
    pub struct LockDifficulty {
        pub locked: BoolField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x11]
    pub struct Position {
        pub x: DoubleField,
        pub y: DoubleField,
        pub z: DoubleField,
        pub on_ground: BoolField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x12]
    pub struct PositionLook {
        pub x: DoubleField,
        pub y: DoubleField,
        pub z: DoubleField,
        pub yaw: FloatField,
        pub pitch: FloatField,
        pub on_ground: BoolField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x13]
    pub struct Look {
        pub yaw: FloatField,
        pub pitch: FloatField,
        pub on_ground: BoolField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x14]
    pub struct Flying {
        pub on_ground: BoolField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x15]
    pub struct VehicleMove {
        pub x: DoubleField,
        pub y: DoubleField,
        pub z: DoubleField,
        pub yaw: FloatField,
        pub pitch: FloatField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x16]
    pub struct SteerBoat {
        pub left_paddle: BoolField,
        pub right_paddle: BoolField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x17]
    pub struct PickItem {
        pub slot: VarIntField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x18]
    pub struct CraftRecipeRequest {
        pub window_id: ByteField,
        pub recipe: StringField,
        pub make_all: BoolField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x19]
    pub struct Abilities {
        pub flags: ByteField,
        pub flying_speed: FloatField,
        pub walking_speed: FloatField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x1a]
    pub struct BlockDig {
        pub status: ByteField,
        pub location: PositionField<578>,
        pub face: ByteField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x1b]
    pub struct EntityAction {
        pub entity_id: VarIntField,
        pub action_id: VarIntField,
        pub jump_boost: VarIntField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x1c]
    pub struct SteerVehicle {
        pub sideways: FloatField,
        pub forward: FloatField,
        pub jump: UByteField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x1d]
    pub struct CraftingBookData {
        pub r#type: VarIntField,
        pub anon: CraftingBookDataAnon,
    }

    pub enum CraftingBookDataAnon {
        // TODO One(...)
    // TODO Two(...)
    }

    impl Display for CraftingBookDataAnon {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("CraftingBookDataAnon") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for CraftingBookDataAnon {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    #[derive(ServerBoundPacket)]
    #[packet_id = 0x1e]
    pub struct NameItem {
        pub name: StringField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x1f]
    pub struct ResourcePackReceive {
        pub result: VarIntField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x20]
    pub struct AdvancementTab {
        pub action: VarIntField,
        pub tab_id: AdvancementTabTabId,
    }

    pub enum AdvancementTabTabId {
        /// action=0
        One(StringField),
        /// action=1
        Two,
    }

    impl Display for AdvancementTabTabId {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_str("AdvancementTabTabId") // TODO better display for autogenerated types
        }
    }

    #[async_trait]
    impl Field for AdvancementTabTabId {
        type Displayable = Self;

        fn value(&self) -> &Self::Displayable {
            self
        }

        fn size(&self) -> usize {
            todo!()
        }

        async fn read_field<R: Read + Unpin + Send>(_r: &mut R) -> PacketResult<Self> {
            todo!()
        }

        async fn write_field<W: Write + Unpin + Send>(&self, _w: &mut W) -> PacketResult<()> {
            todo!()
        }
    }
    #[derive(ServerBoundPacket)]
    #[packet_id = 0x21]
    pub struct SelectTrade {
        pub slot: VarIntField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x22]
    pub struct SetBeaconEffect {
        pub primary_effect: VarIntField,
        pub secondary_effect: VarIntField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x23]
    pub struct HeldItemSlot {
        pub slot_id: ShortField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x24]
    pub struct UpdateCommandBlock {
        pub location: PositionField<578>,
        pub command: StringField,
        pub mode: VarIntField,
        pub flags: UByteField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x25]
    pub struct UpdateCommandBlockMinecart {
        pub entity_id: VarIntField,
        pub command: StringField,
        pub track_output: BoolField,
    }

    /* TODO incomplete struct SetCreativeSlot
    #[derive(ServerBoundPacket)]
    #[packet_id = 0x26]
    pub struct SetCreativeSlot {
        pub slot: ShortField,
        // TODO pub item: Slot,
    }*/

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x27]
    pub struct UpdateJigsawBlock {
        pub location: PositionField<578>,
        pub attachment_type: StringField,
        pub target_pool: StringField,
        pub final_state: StringField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x28]
    pub struct UpdateStructureBlock {
        pub location: PositionField<578>,
        pub action: VarIntField,
        pub mode: VarIntField,
        pub name: StringField,
        pub offset_x: UByteField,
        pub offset_y: UByteField,
        pub offset_z: UByteField,
        pub size_x: UByteField,
        pub size_y: UByteField,
        pub size_z: UByteField,
        pub mirror: VarIntField,
        pub rotation: VarIntField,
        pub metadata: StringField,
        pub integrity: FloatField,
        pub seed: VarIntField,
        pub flags: UByteField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x29]
    pub struct UpdateSign {
        pub location: PositionField<578>,
        pub text_1: StringField,
        pub text_2: StringField,
        pub text_3: StringField,
        pub text_4: StringField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x2a]
    pub struct ArmAnimation {
        pub hand: VarIntField,
    }

    /* TODO incomplete struct Spectate
    #[derive(ServerBoundPacket)]
    #[packet_id = 0x2b]
    pub struct Spectate {
        // TODO pub target: Uuid,
    }*/

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x2c]
    pub struct BlockPlace {
        pub hand: VarIntField,
        pub location: PositionField<578>,
        pub direction: VarIntField,
        pub cursor_x: FloatField,
        pub cursor_y: FloatField,
        pub cursor_z: FloatField,
        pub inside_block: BoolField,
    }

    #[derive(ServerBoundPacket)]
    #[packet_id = 0x2d]
    pub struct UseItem {
        pub hand: VarIntField,
    }
}
